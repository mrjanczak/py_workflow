! select nodes to map parent components to
! map child component elements to parent component elements based on proximity

! CM_NAME_PFX = ARG1 ! name prefix of the component
! TOLER = ARG2     ! tolerance for mapping

*go,:lib
:start

resume


esel,s,mat,,1
nsle
nsel,r,ext

_util_get_parent_cms,'PARENT_DATA_','bsur000',1,4

_util_map_parent_cms,'PARENT_DATA_','bsur000',1,4,.002,15

esel,s,ename,,200
nsle
/PNUM,REAL,1
eplo

/eof
! ---------------------------------
! Create macros to get parent component data and map child elements
! ---------------------------------
*create,_util_get_parent_cms,mac
    ! desc: Get parent component data and create parent elements

    ! notes: Array PARENT_DATA contains data of pairs of adjacent elements attached to each node:
    ! N0x,N0y, CM1,N1x,N1y, CM2,N2x,N2y
    !
    ! ```
    !   CM1    CM2       CM1        CM2
    ! x-----o-----x  , x-----o  , o-----x 
    ! N1    N0    N2   N1    N0   N0    N2
    ! ```

    _PARENT_DATA = ARG1 ! name of the array to store parent component data
    CM_NAME_PATTERN = ARG2 ! component name pattern, e.g. 'bsur000'
    CM0 = ARG3 ! first component index
    CM1 = ARG4 ! last component index

    *get,_PARENT_DATA_TYPE,PARM,,TYPE
    *if,_PARENT_DATA_TYPE,eq,0,then
        _PARENT_DATA = 'PARENT_DATA_'
    *endif

    ! Create parent elements 200 with real = component index
    *get,ET_MAX,ETYP,,NUM,MAX
    PARENT_ET = ET_MAX+1

    *del,CM_DATA_,,nopr $ *dim,CM_DATA_,array,CM1,4 ! parent columns: 1=count, 2=length, child columns: 3=count, 4=length
    *do,CMi,CM0,CM1
        CMi_s = CHRVAL(CMi)
        CM_NAME = STRFILL(CM_NAME_PATTERN, CMi_s, STRLENG(CM_NAME_PATTERN)-STRLENG(CMi_s)+1) 
        *get,CM_TYPE,COMP,CM_NAME,TYPE
        *if,CM_TYPE,ne,1,then
            *msg,ERROR, 'Component %CM_NAME% does not exist or is not nodal'
            %C
            *cycle
        *endif

        cmsel,s,CM_NAME
        esln
        *get,ET_MAX,ETYP,,NUM,MAX
        et,PARENT_ET,MESH200
        type,PARENT_ET
        real, CMi
        esurf

        ! count and measure length of parent component elements
        esel,s,type,,PARENT_ET
        esel,r,real,,CMi 
        *VGET, CM_SEL_, ELEM, ,NSEL
        *VMASK,CM_SEL_ $ *VGET, CM_LEN_, ELEM, ,GEOM
        *VMASK,CM_SEL_ $ *VSCFUN,CM_COUNT, SUM, CM_SEL_(1)
        *VMASK,CM_SEL_ $ *VSCFUN,CM_LEN_SUM, SUM, CM_LEN_(1)
        CM_DATA_(CMi,1) = CM_COUNT   
        CM_DATA_(CMi,2) = CM_LEN_SUM
    *ENDDO
    *VSCFUN,TOTAL_CM_COUNT, SUM, CM_DATA_(1,1)
    *VSCFUN,TOTAL_CM_LEN,   SUM, CM_DATA_(1,2)

    ! Check if components do not overlap
    esel,s,type,,PARENT_ET
    *VGET, ET_SEL_, ELEM, ,NSEL
    *VMASK,ET_SEL_ $ *VGET,  ET_LEN_, ELEM, ,GEOM
    *VMASK,ET_SEL_ $ *VSCFUN,ET_COUNT, SUM, ET_SEL_(1)
    *VMASK,ET_SEL_ $ *VSCFUN,ET_LEN_SUM, SUM, ET_LEN_(1)

    *if,ET_COUNT,ne,TOTAL_CM_COUNT,then
        LEN_RATIO = (TOTAL_CM_LEN-ET_LEN_SUM) / ET_LEN_SUM
        *msg,WARNING, TOTAL_CM_COUNT-ET_COUNT, LEN_RATIO
        %I elements overlaps between components (overlaping length ratio %E). 
    *endif

    ! Get parent elements attached to each node
    nsle
    *get,N_COUNT,NODE,,COUNT
    *del,%_PARENT_DATA%,,nopr $ *dim,%_PARENT_DATA%,array,N_COUNT,8
    *del,N0_,,nopr $ *dim,N0_,array,N_COUNT
    !  N0x,N0y, CM1,N1x,N1y, CM2,N2x,N2y
    *VGET, N0_(1), NODE, ,NLIST
    *do,Ni,1,N_COUNT
        N0 = N0_(Ni)
        %_PARENT_DATA%(Ni,1) = NX(N0)
        %_PARENT_DATA%(Ni,2) = NY(N0)
        
        *del,E_,,nopr $ *dim,E_,array,2
        *del,N_,,nopr $ *dim,N_,array,2,2
        *do,LOCi,1,2
            E2 = ENEXTN(N0,LOCi)
            *if,E2,eq,0,cycle
            E2_N1 = NELEM(E2,1)
            E2_N2 = NELEM(E2,2)
            *if,E2_N1,eq,N0,then
                E2_N1 = E2_N2
            *endif        
            %_PARENT_DATA%(Ni,2+(LOCi-1)*3+1) = EATT(E2, 3)
            %_PARENT_DATA%(Ni,2+(LOCi-1)*3+2) = NX(E2_N1)
            %_PARENT_DATA%(Ni,2+(LOCi-1)*3+3) = NY(E2_N1)
        *enddo
    *enddo

    esel,s,type,,PARENT_ET
    edele,all
    *cfopen,_PARENT_DATA,inp
    *vwrite,%_PARENT_DATA%(1,1),%_PARENT_DATA%(1,2),%_PARENT_DATA%(1,3),%_PARENT_DATA%(1,4),%_PARENT_DATA%(1,5),%_PARENT_DATA%(1,6),%_PARENT_DATA%(1,7),%_PARENT_DATA%(1,8)
(8E8.3)
    *cfclos
*end

*create,_util_map_parent_cms,mac
    ! desc: Map parent components on child elements

    _PARENT_DATA =    ARG1 ! name of the array to store parent component data
    CM_NAME_PATTERN = ARG2 ! component name pattern, e.g. 'bsur000'
    CM0 =             ARG3 ! first component index
    CM1 =             ARG4 ! last component index
    TOLER =           ARG5 ! tolerance of mapping
    NORM_DEV =        ARG6 ! maximum normal deviation in degrees
    ITER_MAX =        ARG7 ! maximum number of iterations to assign parent components

    /PREP7
    *afun,deg

    *get,_PARENT_DATA_TYPE,PARM,,TYPE
    *if,_PARENT_DATA_TYPE,eq,0,then
        _PARENT_DATA = 'PARENT_DATA_'
    *endif

    *if,TOLER,eq,0,then
        TOLER = 1e-3
    *endif
    *if,NORM_DEV,eq,0,then
        NORM_DEV = 15
    *endif
    *if,ITER_MAX,eq,0,then
        ITER_MAX = 3
    *endif

    ! Read parent data
    /INQUIRE,DATA_EXIST,EXIST,%_PARENT_DATA%,inp
    *if,DATA_EXIST,eq,0,then
        *msg,ERRROR, _PARENT_DATA
        %C Parent data %_PARENT_DATA% does not exist. Run _util_get_parent_cms first.
    *endif
    /INQUIRE,N_COUNT,SIZE,%_PARENT_DATA%,inp
    *del,%_PARENT_DATA%,,nopr $ *dim,%_PARENT_DATA%,array,N_COUNT,8
    *vread,%_PARENT_DATA%(1,1),_PARENT_DATA,inp,,jik,8,N_COUNT
(8E8.3)    

    ! Create parent nodes based on parent component data
    *get,PARENT_N_COUNT,PARM, %_PARENT_DATA%, DIM, 1
    *get,PARENT_N_OFF,NODE,,NUM,MAX
    *do,Ni,1,PARENT_N_COUNT
        N0x = %_PARENT_DATA%(Ni,1)
        N0y = %_PARENT_DATA%(Ni,2)
        N,Ni+PARENT_N_OFF,N0x,N0y
    *enddo

    ! Create child elements 200 based on selected nodes
    *get,ET_MAX,ETYP,,NUM,MAX
    CHILD_ET = ET_MAX+1
    ESLN
    et,CHILD_ET,MESH200
    type,CHILD_ET
    real,CM1+1
    esurf

    esel,s,type,,CHILD_ET
    *get,E_COUNT,ELEM,,COUNT
    *del,CHILD_E_,,nopr $ *dim,CHILD_E_,array,E_COUNT,8
    *vget,CHILD_E_(1,1), ELEM, , ELIST
    *do,Ei,1,E_COUNT
        E1 = CHILD_E_(Ei,1)
        CHILD_E_(Ei,2) = CENTRX(E1)
        CHILD_E_(Ei,3) = CENTRY(E1)
        CHILD_E_(Ei,4) = 0
        N1 = NELEM(E1,1)
        N2 = NELEM(E1,2)
        CHILD_E_(Ei,5) = NX(N2)-NX(N1)
        CHILD_E_(Ei,6) = NY(N2)-NY(N1)        
    *enddo

    ! Map child elements to parent elements
    esel,s,TYPE,,PARENT_ET
    nsle
    *MOPER, CHILD_E_(1,7), CHILD_E_(1,2), NNEAR, TOLER
    *do,Ei,1,E_COUNT
        ! Child element E1
        E1 =  CHILD_E_(Ei,1)
        E1x = CHILD_E_(Ei,2)
        E1y = CHILD_E_(Ei,3)
        v00x = CHILD_E_(Ei,5)
        v00y = CHILD_E_(Ei,6)

        ! Get nearest parent node
        N1 = CHILD_E_(Ei,7)
        *if,N1,eq,0,cycle

        Ni = N1 - PARENT_N_OFF
        N1x = %_PARENT_DATA%(Ni,1)
        N1y = %_PARENT_DATA%(Ni,2)

        ! Get parent elemets attached to this node
        norm_dev_1 = 1e3
        norm_dev_2 = 1e3
        *do,LOCi,1,2
            PARENT_CMi = %_PARENT_DATA%(Ni,2+(LOCi-1)*3+1)
            *if,PARENT_CMi,eq,0,cycle

            N2x = %_PARENT_DATA%(Ni,2+(LOCi-1)*3+2)
            N2y = %_PARENT_DATA%(Ni,2+(LOCi-1)*3+3)

            v0x = N2x - N1x
            v0y = N2y - N1y
            v1x = E1x - N1x
            v1y = E1y - N1y
            v2x = E1x - N2x
            v2y = E1y - N2y

            cross0 = v0x*v00y-v0y*v00x    
            dot0 =   v0x*v00x+v0y*v00y     
            alf0 = abs(atan2(cross0, dot0))

            cross1 = v0x*v1y-v0y*v1x    
            dot1 =   v0x*v1x+v0y*v1y     
            alf1 = abs(atan2(cross1, dot1))

            cross2 = v0x*v2y-v0y*v2x    
            dot2 =   v0x*v2x+v0y*v2y     
            alf2 = abs(atan2(cross2, dot2))

            ! Check if projection falls within the parent element
            *if,alf1,le,90,and,alf2,ge,90,then
                is_inside = 1
            *else
                is_inside = 0
            *endif
            norm_dev_%LOCi% = alf0
            *if,alf0,le,norm_dev, and, is_inside,eq,1,then
                ! map child element to parent element
                CHILD_E_(Ei,8) = PARENT_CMi
                *exit          
            *endif
        *enddo

        ! If child outside both parent elems, use one with smallest deviation
        *if,CHILD_E_(Ei,6),eq,0,then

            *if, norm_dev_1, lt, norm_dev_2, and, norm_dev_1, le, norm_dev, then
                LOCi = 1                
            *elseif, norm_dev_2, lt, norm_dev_1, and, norm_dev_2, le, norm_dev, then
                LOCi = 2
            *endif
            CHILD_E_(Ei,8) = %_PARENT_DATA%(Ni,2+(LOCi-1)*3+1)
        *endif
    *enddo

    ! Assign parent component to child elements
    esel,s,TYPE,,CHILD_ET
    *do,Ei,1,E_COUNT
        E1 = CHILD_E_(Ei,1)
        PARENT_CMi = CHILD_E_(Ei,8)
        *if,PARENT_CMi,gt,0,then
            emodif,E1,REAL, PARENT_CMi
        *endif
    *enddo

    ! If not mapped, get component from adjacent element
    COUNTER0 = 0
    COUNTER1 = 0
    *do,ITERi,1,ITER_MAX
        *do,Ei,1,E_COUNT
            PARENT_CMi = CHILD_E_(Ei,8)
            *if,PARENT_CMi,gt,0,CYCLE

            COUNTER1 = COUNTER1 + 1
            E1 = CHILD_E_(Ei,1)
            v00x = CHILD_E_(Ei,5)
            v00y = CHILD_E_(Ei,6)

            *do,LOCi,1,2
                N1 = NELEM(E1,LOCi)
                E2 = ENEXTN(N1,1)
                *if,E2,eq,E1,then
                    E2 = ENEXTN(N1,2)
                *endif
                *if,E2,eq,0,cycle
                N1 = NELEM(E1,1)
                N2 = NELEM(E1,2)
                v0x = NX(N2)-NX(N1)
                v0y = NY(N2)-NY(N1)   

                ! Check deviation
                cross0 = v0x*v00y-v0y*v00x    
                dot0 =   v0x*v00x+v0y*v00y     
                alf0 = abs(atan2(cross0, dot0)) 
                *if,alf0,lt,norm_dev,then
                    PARENT_CMi = EATT(E2,3)
                    emodif,E1,REAL, PARENT_CMi
                    *exit                            
                *endif
            *enddo
        *enddo   
        *if,COUNTER1,eq,COUNTER0,exit
        COUNTER0 = COUNTER1
        COUNTER1 = 0
    *enddo 

    ! Create child components
    *do,CMi,CM0,CM1
        CMi_s = CHRVAL(CMi)
        CM_NAME = STRFILL(CM_NAME_PATTERN, CMi_s, STRLENG(CM_NAME_PATTERN)-STRLENG(CMi_s)+1) 
        esel,s,TYPE,,CHILD_ET
        esel,r,REAL,,CMi
        nsle
        cm,CM_NAME,node
    *ENDDO

    ! esel,s,TYPE,,CHILD_ET
    ! edele,all
*end

*go,:start
